// Generated by CoffeeScript 1.10.0
var BootstrapButton, BootstrapModal, ChatPanel, ChatPanelBody, ChatPanelFooter, ChatPanelHeader, ColorChoose, colorList;

Date.prototype.format = function(fmt) {
  var k, o, v;
  o = {
    "M+": this.getMonth() + 1,
    "d+": this.getDate(),
    "h+": this.getHours(),
    "m+": this.getMinutes(),
    "s+": this.getSeconds(),
    "q+": Math.floor((this.getMonth() + 3) / 3),
    "S": this.getMilliseconds()
  };
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
  }
  for (k in o) {
    v = o[k];
    if (new RegExp("(" + k + ")").test(fmt)) {
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? v : ("00" + v).substr(("" + v).length));
    }
  }
  return fmt;
};

colorList = ['46D6FE', 'FC85D0', 'EFFC83', 'FB3C42', '9A81FE', '85FB5C'];

window.userData = {
  name: 'Visitor',
  color: 5
};

ChatPanelHeader = React.createClass({displayName: "ChatPanelHeader",
  render: function() {
    var listNode, that;
    that = this.props.that;
    listNode = this.props.datas.map(function(li, index) {
      if (li["class"]) {
        return React.createElement("li", {
          "key": index,
          "className": li["class"]
        });
      } else {
        return React.createElement("li", {
          "key": index
        }, React.createElement("a", {
          "href": li.href,
          "onClick": (li.click ? li.click : null)
        }, React.createElement("i", {
          "className": li.icon
        }), " ", li.text));
      }
    });
    return React.createElement("div", {
      "className": "panel-heading"
    }, React.createElement("i", {
      "className": "fa fa-comments fa-fw"
    }), " Chat", React.createElement("div", {
      "className": "btn-group pull-right"
    }, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default btn-xs dropdown-toggle",
      "data-toggle": "dropdown"
    }, React.createElement("i", {
      "className": "fa fa-chevron-down"
    })), React.createElement("ul", {
      "className": "dropdown-menu slidedown"
    }, listNode)));
  }
});

ChatPanelFooter = React.createClass({displayName: "ChatPanelFooter",
  handleSubmit: function(e) {
    var text;
    e.preventDefault();
    text = React.findDOMNode(this.refs.text).value.trim();
    if (!text) {
      return;
    }
    this.props.onMsgSubmit({
      text: text,
      time: new Date().getTime()
    });
    return React.findDOMNode(this.refs.text).value = '';
  },
  render: function() {
    return React.createElement("div", {
      "className": "panel-footer"
    }, React.createElement("form", {
      "className": "input-group",
      "onSubmit": this.handleSubmit
    }, React.createElement("input", {
      "type": "text",
      "className": "form-control input-sm",
      "placeholder": "Type your message here...",
      "ref": "text"
    }), React.createElement("span", {
      "className": "input-group-btn"
    }, React.createElement("button", {
      "type": "submit",
      "className": "btn btn-warning btn-sm"
    }, "Send"))));
  }
});

ChatPanelBody = React.createClass({displayName: "ChatPanelBody",
  componentDidUpdate: function() {
    if (!(this.props.datas.length > 0)) {
      return;
    }
    return $(React.findDOMNode(this)).animate({
      scrollTop: $(React.findDOMNode(this.refs['ul'])).height()
    }, 800);
  },
  render: function() {
    var chatNode;
    chatNode = this.props.datas.map(function(message, index) {
      var isUserSelf;
      if (index === 0) {
        return;
      }
      isUserSelf = userData.name === message.sender;
      return React.createElement("li", {
        "key": index,
        "className": "clearfix left"
      }, React.createElement("span", {
        "className": "chat-img pull-left"
      }, React.createElement("div", {
        "className": "div-circle-50",
        "style": {
          backgroundColor: "#" + colorList[message.color]
        }
      }, message.sender[0])), React.createElement("div", {
        "className": "chat-body clearfix"
      }, React.createElement("div", {
        "className": "header"
      }, React.createElement("strong", {
        "className": "primary-font"
      }, message.sender), React.createElement("small", {
        "className": "pull-right text-muted"
      }, React.createElement("i", {
        "className": "fa fa-clock-o fa-fw"
      }), " ", new Date(parseInt(message.time)).format('yyyy-MM-dd'))), React.createElement("p", null, message.text)));
    });
    return React.createElement("div", {
      "className": "panel-body"
    }, React.createElement("ul", {
      "className": "chat",
      "ref": "ul"
    }, chatNode));
  }
});

ColorChoose = React.createClass({displayName: "ColorChoose",
  handleChoose: function(i) {
    return this.setState({
      color: i
    });
  },
  getInitialState: function() {
    return {
      color: null
    };
  },
  render: function() {
    var aList, checked, i;
    checked = React.createElement("i", {
      "className": "fa fa-check fa-fw"
    });
    aList = (function() {
      var j, results;
      results = [];
      for (i = j = 0; j < 5; i = ++j) {
        results.push(React.createElement("a", {
          "key": i,
          "href": "javascript:;",
          "onClick": this.handleChoose.bind(this, i),
          "style": {
            backgroundColor: "#" + colorList[i]
          },
          "className": "col-sm-offset-1 col-sm-1 div-circle-50 " + (this.state.color === i ? 'border-gray' : void 0)
        }, (this.state.color === i ? checked : void 0)));
      }
      return results;
    }).call(this);
    return React.createElement("div", {
      "style": {
        height: '50px'
      }
    }, aList);
  }
});

ChatPanel = React.createClass({displayName: "ChatPanel",
  chatMenuData: [
    {
      href: "javascript:;",
      icon: "fa fa-user fa-fw",
      text: 'Setting',
      click: function() {
        return window.chatPanel.openModal();
      }
    }
  ],
  loadMsgsFromServer: function() {
    return $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: (function(data) {
        if (data[0].time === '0') {
          return;
        }
        if (this.state.data.length > 0 && data[0].time === this.state.data[0].time) {
          return;
        }
        return this.setState({
          data: data
        });
      }).bind(this),
      error: (function(xhr, status, err) {
        return console.error(this.props.url, status, err.toString());
      }).bind(this)
    });
  },
  handleMsgSubmit: function(message) {
    var messages, newMessages;
    message['sender'] = userData.name;
    message['color'] = userData.color;
    messages = this.state.data;
    newMessages = messages.concat([message]);
    this.setState({
      data: newMessages
    });
    return $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: message,
      success: (function(data) {
        return this.setState({
          data: data
        });
      }).bind(this),
      error: (function(xhr, status, err) {
        return console.error(this.props.url, status, err.toString());
      }).bind(this)
    });
  },
  getInitialState: function() {
    window.chatPanel = this;
    return {
      data: [],
      firstLoad: true
    };
  },
  openModal: function() {
    return this.refs.modal.open();
  },
  closeModal: function() {
    var color, name;
    name = React.findDOMNode(this.refs.userName).value.trim();
    if (name !== '') {
      window.userData.name = name;
    }
    color = this.refs.color.state.color;
    if (color !== null) {
      window.userData.color = color;
    }
    if (this.state.firstLoad) {
      this.state.firstLoad = false;
      this.loadMsgsFromServer();
      setInterval(this.loadMsgsFromServer, this.props.pollInterval);
    }
    return this.refs.modal.close();
  },
  componentDidMount: function() {
    return this.openModal();
  },
  componentWillUnmount: function() {
    return window.chatPanel = null;
  },
  render: function() {
    return React.createElement("div", {
      "className": "chat-panel panel panel-default"
    }, React.createElement(ChatPanelHeader, {
      "datas": this.chatMenuData,
      "that": this
    }), React.createElement(ChatPanelBody, {
      "datas": this.state.data
    }), React.createElement(ChatPanelFooter, {
      "onMsgSubmit": this.handleMsgSubmit
    }), React.createElement(BootstrapModal, {
      "ref": "modal",
      "confirm": "OK",
      "onConfirm": this.closeModal,
      "title": "Hello,"
    }, React.createElement("p", null, "Good day, visitor."), React.createElement("p", null, "This demo is built with ", React.createElement("strong", null, "Facebook React"), " and ", React.createElement("strong", null, "Twitter Bootstrap"), ".", React.createElement("br", null), "You can chat with other visitors of this demo at the same time.", React.createElement("br", null), "Anyway, just try, and you will konw what\'s it."), React.createElement("p", null, "Enjoy!"), React.createElement("hr", null), React.createElement("p", null, "Now, let\'s do some option."), React.createElement("input", {
      "className": "form-control",
      "ref": "userName",
      "placeholder": "Input your nickname here"
    }), React.createElement("p", null, React.createElement("br", null), "And, which color do you prefer?"), React.createElement(ColorChoose, {
      "ref": "color"
    })));
  }
});

BootstrapButton = React.createClass({displayName: "BootstrapButton",
  render: function() {
    return React.createElement("a", React.__spread({}, this.props, {
      "href": "javascript:;",
      "role": "button",
      "className": (this.props.className || '') + ' btn'
    }));
  }
});

BootstrapModal = React.createClass({displayName: "BootstrapModal",
  componentDidMount: function() {
    return $(React.findDOMNode(this)).modal({
      backdrop: 'static',
      keyboard: false,
      show: false
    });
  },
  componentWillUnmount: function() {
    return $(React.findDOMNode(this)).off('hidden', this.handleHidden);
  },
  close: function() {
    return $(React.findDOMNode(this)).modal('hide');
  },
  open: function() {
    return $(React.findDOMNode(this)).modal('show');
  },
  handleCancel: function() {
    if (this.props.onCancel) {
      return this.props.onCancel();
    }
  },
  handleConfirm: function() {
    if (this.props.onConfirm) {
      return this.props.onConfirm();
    }
  },
  render: function() {
    var cancelButton, closeButton, confirmButton;
    confirmButton = null;
    cancelButton = null;
    closeButton = null;
    if (this.props.confirm) {
      confirmButton = React.createElement(BootstrapButton, {
        "onClick": this.handleConfirm,
        "className": "btn-primary"
      }, this.props.confirm);
    }
    if (this.props.cancel) {
      cancelButton = React.createElement(BootstrapButton, {
        "onClick": this.handleCancel,
        "className": "btn-default"
      }, this.props.cancel);
    }
    if (this.props.cancel) {
      closeButton = React.createElement("button", {
        "type": "button",
        "className": "close",
        "onClick": this.handleCancel
      }, "\u00d7");
    }
    return React.createElement("div", {
      "className": "modal fade"
    }, React.createElement("div", {
      "className": "modal-dialog"
    }, React.createElement("div", {
      "className": "modal-content"
    }, React.createElement("div", {
      "className": "modal-header"
    }, React.createElement("h3", null, this.props.title)), React.createElement("div", {
      "className": "modal-body"
    }, this.props.children), React.createElement("div", {
      "className": "modal-footer"
    }, cancelButton, confirmButton))));
  }
});

React.render(React.createElement(ChatPanel, {
  "url": "messages.json",
  "pollInterval": 2000.
}), document.getElementById('content'));
